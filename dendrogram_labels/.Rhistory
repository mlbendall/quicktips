nbatch <- 11
ncond <- 3
npercond <- 11
subject_id <- c(1, 1, 1, 2, 2, 2, 3, 3, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9,
10, 10, 10, 12, 12, 12, 13, 13, 13, 15, 15, 15)
batch <- unlist(lapply(subject_id, FUN=function(id) {paste("Person", id)}))
diet <- c(1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 2, 1, 3, 2, 1, 3, 1, 2, 1, 2, 3,
2, 1, 3, 3, 1, 2, 3, 1, 2, 2, 3, 1)
diet_key <- c("simple", "refined", "unrefined")
condition <- diet_key[diet]
example_data_dir <- system.file("example/data", package = "PathoStat")
runPathoStat(input_dir=example_data_dir, batch=batch, condition=condition,
report_file="pathostat_report.html", report_dir=".", report_option_binary=
"111111111", view_report=FALSE, interactive=TRUE)
dev_mode(F)
source("http://bioconductor.org/biocLite.R")
biocLite("BatchQC")
require(devtools)
install_github("mani2012/BatchQC", build_vignettes=TRUE)
?BatchQC::batchqc_pca
remove.packages(BatchQC)
remove.packages('BatchQC')
install.packages(devtools)
install.packages('devtools')
require(devtools)
.libPaths()
install.packages("devtools")
?devtools::dev_mode()
?devtools::dev_mode
library(knitr)
devtools::dev_mode(path="~/.Rlibs/PathoStat")
?GEOquery::getGEO
mtcars
`*`(2,3)
NA & NA
NA & 1
NA + NA
NA+1
x <- c(1,1,NA,NA)
y <- c(1,NA,1,NA)
is.na(x) && is.na(y)
is.na(x)
is.na(x) + is.na(y)
sum(is.na(x) + is.na(y) == 2)
setwd("/Users/bendall/Projects/asthma/results20151216")
rm(list=ls())
library(cummeRbund)
library(knitr)
options(digits=6)
knit_hooks$set(inline = function(x) {prettyNum(x, big.mark=",")})
knitr::opts_chunk$set(echo = TRUE)
# Use CummeRbund to load data from cuffdiff output
# This takes awhile the first time around, but is faster on subsequent loads
cuff <- readCufflinks("cuffdiff",gtfFile="merged_asm/merged.gtf",genome="hg38")
cuff
library(DT)
DT(replicates(cuff))
DT::datatable(replicates(cuff), options=list(paging=FALSE))
DT::datatable(replicates(cuff), options=list(paging=FALSE, search=FALSE))
?datatable
DT::datatable(replicates(cuff), options=list(paging=FALSE, searching=FALSE))
dend.rep <- csDendro(genes(cuff),replicates=T)
?strsplit(replicates(cuff)$file)
strsplit(replicates(cuff)$file, '/')
unlist(strsplit(replicates(cuff)$file, '/'))
goodnames <- gsub('/abundances.cxb','',gsub('/lustre/groups/cbi/asthma/host/hg38/','',replicates(cuff)$file))
# name vector using rep_name column (the column used in the dendrogram)
names(goodnames) <- replicates(cuff)$rep_name
# goodnames in the same order as the table:
goodnames <- gsub('/abundances.cxb','',gsub('/lustre/groups/cbi/asthma/host/hg38/','',replicates(cuff)$file))
# name vector using rep_name column (the column used in the dendrogram)
names(goodnames) <- replicates(cuff)$rep_name
goodnames
goodnames <- gsub('/lustre/groups/cbi/asthma/host/hg38/', '', replicates(cuff)$file)
goodnames <- gsub('/abundances.cxb', '', goodnames)
goodnames
# goodnames (in the same order as the table):
goodnames <- gsub('/lustre/groups/cbi/asthma/host/hg38/', '', replicates(cuff)$file)
goodnames <- gsub('/abundances.cxb', '', goodnames)
# give the vector names using the rep_name column
names(goodnames) <- replicates(cuff)$rep_name
goodnames
dend.rep %>% set("labels", goodnames[labels(dend.rep)]) %>% plot
library(dendextend)
?dendextend::set
dend.rep %>% dendextend::set("labels", goodnames[labels(dend.rep)]) %>% plot
dplyr::%>%
?dplyr::%>%
?dplyr
?%>%
?`%>%`
help(`%>%`)
help(`magrittr%>%`)
help(`magrittr::%>%`)
help(`%>%`)
DT::datatable(replicates(cuff),
options=list(paging=FALSE, searching=FALSE, scrollX=TRUE))
dend.rep <- csDendro(genes(cuff),replicates=T)
dend.rep %>% dendextend::set("labels", goodnames[labels(dend.rep)]) %>% plot
dend.rep
dend.rep <- csDendro(genes(cuff), replicates=T)
?dendextend::set
x <- c(F,F,T,F,F)
cumsum(x)
cumsum(x) + 1
cumsum(x) + !x[1]
!x[1]
?library
dend.rep %>% dendextend::set("labels", goodnames[labels(dend.rep)]) %>% plot
?dendextend::set
replicates(cuff)$sample_name
dend.rep %>%
dendextend::set("labels", goodnames[labels(dend.rep)]) %>%
dendextend::set("labels_colors", goodnames[labels(dend.rep)]) %>%
plot
dend.rep %>%
dendextend::set("labels", goodnames[labels(dend.rep)]) %>%
dendextend::set("labels_colors") %>%
plot
dend.rep %>%
dendextend::set("labels", goodnames[labels(dend.rep)]) %>%
dendextend::set("labels_col", tipcolors) %>%
plot
tipcolors <- factor(replicates(cuff)$sample_name)
dend.rep %>%
dendextend::set("labels", goodnames[labels(dend.rep)]) %>%
dendextend::set("labels_col", tipcolors) %>%
plot
pal
pal <- RColorBrewer::brewer.pal(2,'Dark2')
pal <- RColorBrewer::brewer.pal(3,'Dark2')
pal <- RColorBrewer::brewer.pal(7,'Dark2')
pal[factor(replicates(cuff)$sample_name)]
tipcolors <- pal[factor(replicates(cuff)$sample_name)]
dend.rep %>%
dendextend::set("labels", goodnames[labels(dend.rep)]) %>%
dendextend::set("labels_col", tipcolors) %>%
plot
pal <- RColorBrewer::brewer.pal(7,'Dark2')
# Get a
tipcolors <- pal[factor(replicates(cuff)$sample_name)]
names(tipcolors) <- replicates(cuff)$rep_name
dend.rep %>%
dendextend::set("labels", goodnames[labels(dend.rep)]) %>%
dendextend::set("labels_col", tipcolors) %>%
plot
?dendextend
?dendextend::as.ggdend
gdend <- dend.rep %>%
dendextend::set("labels", goodnames[labels(dend.rep)]) %>%
as.ggdend
gdend
gdend <- dend.rep %>% as.ggdend
gdend
gdend <- dend.rep %>% as.ggdend
gdend$labels
gdend <- dend.rep %>%
dendextend::set("labels", goodnames[labels(dend.rep)]) %>%
as.ggdend
gdend$labels
gdend$labels$col
replicates(cuff)
ggd <- as.ggdend(dend.rep)
ggd
ggplot(ggd)
labels(dend.rep)
newdend <- dend.rep
labels(newdend) <- goodnames[labels(newdend)]
ggplot(ggd)
newdend %>% plot
labels(newdend) <- goodnames[labels(newdend)]
newdend <- dend.rep
labels(newdend) <- goodnames[labels(newdend)]
plot(newdend)
newdend
dendro_data(dend.rep)
ggdendro::dendro_data(dend.rep)
ggd <- ggdendro::dendro_data(dend.rep)
labels(ggd)
label(ggd)
labels(ggd)
ggd$labels
ggd$labels$label
replicates(cuff)
replicates(cuff)$rep_name==ggd$labels$label
replicates(cuff)[replicates(cuff)$rep_name == ggd$labels$label,]
replicates(cuff)$rep_name
dvars <- replicates(cuff)
dvars <- replicates(cuff)
rownames(dvars) <- dvars$rep_name
dvars
dvars[ggd$labels$label,]
ggd$labels$label
ggd$labels$label
dvars <- replicates(cuff)
rownames(dvars) <- dvars$rep_name
dvars[ggd$labels$label,]
ggd$labels$label
dvars[order(ggd$labels$label),]
dvars <- replicates(cuff)
dvars
ggd <- ggdendro::dendro_data(dend.rep)
dvars <- replicates(cuff)
rownames(dvars) <- dvars$rep_name
dvars
dvars[as.character(ggd$labels$label),]
dvars <- dvars[as.character(ggd$labels$label),]
ggplot(ggd)
ggd <- ggdendro::dendro_data(dend.rep)
dvars <- replicates(cuff)
rownames(dvars) <- dvars$rep_name
# Reorder
dvars <- dvars[as.character(ggd$labels$label),]
ggplot(ggd)
ggd
ggplot(segment(ggd))
library(ggplot2)
ggplot(ggd$segments) + geom_segment(aes(x=x,y=y))
ggplot(ggd$segments) + geom_segment(aes(x=x, y=y, xend=xend, yend=yend))
ggplot(ggd$segments) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels,aes(x,y,label=label))
ggplot(ggd$segments) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x,y,label=label),
hjust = 1, angle = 90, size = 3)
dvars$sample_name
ggplot(ggd$segments) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=label, color=dvars$sample_name),
hjust = 1, angle = 90, size = 3)
goodnames
goodnames[rownames(dvars)]
ggd <- ggdendro::dendro_data(dend.rep)
dvars <- replicates(cuff)
rownames(dvars) <- dvars$rep_name
dvars$goodname <- goodnames[rownames(dvars)]
dvars <- dvars[as.character(ggd$labels$label),]
ggplot(ggd$segments) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name),
hjust = 1, angle = 90, size = 3)
ggplot(ggd$segments) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name),
hjust = 1, angle = 90, size = 2.5)
ggplot(ggd$segments) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name),
hjust = 1, angle = 60, size = 2.5)
ggplot(ggd$segments, horiz=T, theme=NULL) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name),
hjust = 1, angle = 60, size = 2.5)
ggplot(ggd$segments, horiz=T, theme=NULL) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
ggplot(ggd$segments, theme=theme_minimal()) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
library(ggplot2)
# library(ggdendro) # Loads `ggendro::dendro_data` as `dendro_data`
# Convert to dendro data object
ggd <- ggdendro::dendro_data(dend.rep)
# Set up data.frame with the other variables
dvars <- replicates(cuff)
rownames(dvars) <- dvars$rep_name
# Reorder data.frame (same order as ggd)
dvars <- dvars[as.character(ggd$labels$label),]
# Add the good names to data.frame
dvars$goodname <- goodnames[rownames(dvars)]
ggplot(ggd$segments, theme=theme_minimal()) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
ggplot(ggd$segments, horiz=T, theme=theme_minimal()) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
ggplot(ggd$segments, horiz=T, theme=theme_minimal()) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend)) +
ggplot(ggd$segments, horiz=T, theme=theme_minimal()) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend))
ggplot(ggd$segments, horiz=T, theme=theme_minimal())
ggplot(ggd$segments, horiz=T, theme=theme_minimal()) +
geom_segment(aes(x=x, y=y, xend=xend, yend=yend))
ggdendrogram(ggd, rotate=F)
library(ggdendrogram)
library(ggdendro)
ggdendrogram(ggd, rotate=F)
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
ggdendrogram(ggd) + coord_flip() + theme_dendro()
ggdendrogram(ggd) + coord_flip() + theme_dendro() +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
ggdendrogram(ggd) + theme_dendro() +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
ggdendrogram(ggd, rotate=T) + theme_dendro() +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
ggdendrogram(ggd, rotate=T) + coord_flip() + theme_dendro() +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name))
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse(expand = c(0.2, 0)) + theme_dendro()
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro()
ggdendrogram(ggd, rotate=T, aes(color=dvars$sample_name))
ggdendrogram(ggd, rotate=T, aes(x, y, color=dvars$sample_name))
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro()
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
scale_y_reverse() + theme_dendro()
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x-5, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y-5, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y+2, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + theme_dendro() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y-0.2, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro() + theme(legend.position="none")
ggdendrogram(ggd, rotate=T) +
geom_text(data=ggd$labels, aes(x, y-0.05, label=dvars$goodname, color=dvars$sample_name)) +
coord_flip() + scale_y_reverse() + theme_dendro() + theme(legend.position="none")
setwd("/Users/bendall/Projects/asthma/results20151216")
setwd("/Users/bendall/Projects/asthma/results20160218")
rm(list=ls())
library(cummeRbund)
library(knitr)
library(DT)
options(digits=6)
knit_hooks$set(inline = function(x) {prettyNum(x, big.mark=",")})
knitr::opts_chunk$set(echo = TRUE)
# Use CummeRbund to load data from cuffdiff output
# This takes awhile the first time around, but is faster on subsequent loads
cuff <- readCufflinks("cuffdiff",gtfFile="merged_asm/merged.gtf",genome="hg38")
cuff
?readCufflinks
install.packages("purrr")
library(purrr)
?map
?map_if
mtcars
map_dbl(mtcars,mean)
newdend <- dend.rep
library(cummeRbund)
library(knitr)
library(DT)
options(digits=6)
knit_hooks$set(inline = function(x) {prettyNum(x, big.mark=",")})
knitr::opts_chunk$set(echo = TRUE)
# Use CummeRbund to load data from cuffdiff output
# This takes awhile the first time around, but is faster on subsequent loads
cuff <- readCufflinks('/Users/bendall/Projects/asthma/results20160218/cuffdiff',
genome="hg38")
cuff
library(cummeRbund)
library(knitr)
library(DT)
options(digits=6)
knit_hooks$set(inline = function(x) {prettyNum(x, big.mark=",")})
knitr::opts_chunk$set(echo = TRUE)
# Use CummeRbund to load data from cuffdiff output
# This takes awhile the first time around, but is faster on subsequent loads
cuff <- readCufflinks('/Users/bendall/Projects/asthma/results20160218/cuffdiff',
genome="hg38")
cuff
DT::datatable(replicates(cuff),
options=list(paging=FALSE, searching=FALSE, scrollX=TRUE))
dend.rep <- csDendro(genes(cuff), replicates=T)
# goodnames (in the same order as the table):
goodnames <- gsub('/lustre/groups/cbi/asthma/host/hg38/', '', replicates(cuff)$file)
goodnames <- gsub('/abundances.cxb', '', goodnames)
# give the vector names using the rep_name column
names(goodnames) <- replicates(cuff)$rep_name
goodnames
newdend <- dend.rep
labels(newdend) <- goodnames[labels(newdend)]
plot(newdend)
newdend <- dend.rep
dendextend::labels(newdend) <- goodnames[labels(newdend)]
plot(newdend)
?map_dbl
library(purrr)
?map_dbl
map(mtcars,mean)
lapply(c(-10, 0, 10, 100), function(x) rnorm(n=10,x))
iris
lapply(iris, duplicated)
lapply(iris, function(x) sum(!duplicated(x)))
sapply(iris, function(x) sum(!duplicated(x)))
length(unique(iris$Sepal.Width))
length(unique(iris$Petal.Length))
map_dbl(mtcars, mean)
map(c(-10, 0, 10, 100), function(x) rnorm(n=10,x))
?map
map(c(-10, 0, 10, 100), rnorm, n=10)
map(c(-10, 0, 10, 100), rnorm, mu=10)
map(c(-10, 0, 10, 100), rnorm, n=10)
map_dbl(c(-10, 0, 10, 100), rnorm, n=10)
map(c(-10, 0, 10, 100), rnorm, n=10)
map(iris, function(x) sum(!duplicated(x)))
map_int(iris, function(x) sum(!duplicated(x)))
opts_chunk
opts_chunk$get()
col_means
?col_means
col_means <- function(df) {   numeric <- sapply(df, is.numeric)   numeric_cols <- df[, numeric]   data.frame(lapply(numeric_cols, mean)) }
col_means <- function(df) {
numeric <- sapply(df, is.numeric)
numeric_cols <- df[, numeric]
data.frame(lapply(numeric_cols, mean))
}
col_means(mtcars)
col_means(mtcars[,0])
mtcars[,0]
mtcars[,0].dim()
dim(mtcars[,0])
sapply(mtcars,is.numeric)
sapply(mtcars[,0],is.numeric)
length(sapply(mtcars[,0],is.numeric))
sapply(mtcars[,0],is.numeric)
stopifnot(sapply(mtcars[,0],is.numeric))
?data.frame
mtcars[,0]
dim(mtcars[,0])
dim(mtcars[0,])
sapply(mtcars[,0], is.numeric)
sapply(mtcars[0,], is.numeric)
setwd("~/Development/Gists/dendrogram_labels.git")
?knitr::knit
by_cyl <- split(mtcars, mtcars$cyl)
models <- map(by_cyl, ~ lm(mpg ~ wt, data= .))
str(models)
lenght(models)
length(models)
map(models,summary)
str(models[[1]])
map(models, summary(.)$r.squared)
map(models, function(x) summary(x)$r.squared)
map_dbl(models, function(x) summary(x)$r.squared)
?`[[`
map(models, '[[', i="coefficients")
models %>% map(summary) %>% map_dbl('r.squared')
models %>% map(summary) %>% map_dbl('coefficient')
models %>% map(summary) %>% map('coefficients')
models %>% map(coef)
install.packages('broom')
iris %>% purrr::map_int(~ .x %>% unique %>% length)
iris %>% purrr::map_int(. %>% unique %>% length)
iris %>% purrr::map_int(. %>% unique() %>% length())
iris %>% purrr::map_int(~ %>% unique() %>% length())
iris %>% purrr::map_int(~ %>% unique(.) %>% length())
setwd("~/Development/Gists/dendrogram_labels.git")
knitr::render('dendrogram_labels.Rmd')
?knitr::render_markdown
knitr::knit('dendrogram_labels.Rmd')
?safely
urls <- c(   "http://google.com",   "https://en.wikipedia.org",   "asdfasdasdkfjlda" )
# Fails
contents <- map(urls, readLines)
# Always succeeds
contents <- urls %>% map(safely(readLines))
str(contents)
transpose(contents)
transpose(contents)  %>% simplify_all()
iris %>% purrr::map_int(function(.) . %>% unique %>% length)
iris %>% purrr::map_int(function(.) . %>% unique %>% length)
iris %>% purrr::map_int(function(x) x %>% unique %>% length)
iris %>% purrr::map_int(function(.) . %>% unique %>% length)
iris %>% purrr::map_int( ( %>% unique %>% length)
iris %>% purrr::map_int( `(` %>% unique %>% length)
iris %>% purrr::map_int( . %>% unique %>% length)
contents %>% transpose %>% str
contents$error %>% map_lgl(is.null)
contents <- urls %>% map(safely(readLines))
contents %>% transpose %> .$error %>% map_lgl(is.null)
contents %>% transpose %>% .$error %>% map_lgl(is.null)
?attr
dvars %>% attr
iris %>% attr
str(iris)
iris %>% attributes()
iris$Species %>% attributes()
setwd("~/Development/quicktips.git/dendrogram_labels")
Sys.Date
Sys.Date()
d <- Sys.Date()
d %>% str
unclass(d)
Sys.Date()
d <- Sys.Date()
unclass(d)
